* Testing in Haskell with Servant

Repository http://github.com/algas/haskell-servant-cookbook

** Test target

The following API returns "Simple" when you send a request to your
server.

#+BEGIN_SRC haskell :tangle extestserver :shebang "#!/usr/bin/env stack\n-- stack --resolver lts-12.20 script" :noweb strip-export
    {-# LANGUAGE DataKinds         #-}
    {-# LANGUAGE DeriveGeneric     #-}
    {-# LANGUAGE OverloadedStrings #-}
    {-# LANGUAGE TypeOperators     #-}
    module SimpleApi where

    import           Data.Aeson
    import           Data.Proxy
    import           Data.Text                  (Text)
    import           GHC.Generics
    import           Network.Wai
    import           Servant
    import           Servant.API
    <<imports>>

    type SimpleAPI  = Get '[PlainText] Text

    simpleApi :: Proxy SimpleAPI
    simpleApi = Proxy

    server :: Server SimpleAPI
    server = return "Simple"

    app :: Application
    app = serve simpleApi server
#+END_SRC

** Test code

Use =with= function in hspec-wai to call =app= function in =SimpleApi=

#+BEGIN_SRC haskell
    with :: IO a -> SpecWith a -> Spec
#+END_SRC

Test codes as following.

#+NAME: imports
#+BEGIN_SRC haskell 
    import           Test.Hspec
    import           Test.Hspec.Wai
    import           Test.Hspec.Wai.JSON
#+END_SRC
#+BEGIN_SRC haskell :tangle extestserver
    spec :: Spec
    spec = with (return app) $ do
        describe "GET /" $ do
            it "responds with 200" $ do
                get "/" `shouldRespondWith` 200
            it "responds with 'Simple'" $ do
                get "/" `shouldRespondWith` "Simple"


    main :: IO ()
    main = hspec spec
#+END_SRC


** Dependencies
#+BEGIN_SRC haskell
    test-suite test
      type:                exitcode-stdio-1.0
      hs-source-dirs:      test
      main-is:             Spec.hs
      build-depends:       base
                         , hspec
                         , hspec-wai
                         , hspec-wai-json
                         , aeson
                         , transformers
                         , haskell-servant-cookbook
      ghc-options:         -threaded -rtsopts -with-rtsopts=-N
      default-language:    Haskell2010
#+END_SRC


** Usage with this file

*** First we tangle the file, by running M-x org-babel-tangle
**** all options

  + directly in emacs with M-x org-babel-tangle
  + running the block with C-c C-c
     #+BEGIN_SRC elisp
  (org-babel-tangle)
  #+END_SRC

  #+RESULTS:
  | extestserver | make.sh |

  #+RESULTS:
  | extestserver | make.sh |

  + by running the script below (in command line or with C-c C-c)
      #+BEGIN_SRC sh
  emacs --batch -l org HelloWorld.org -f org-babel-tangle
  #+END_SRC
  + by tangling every file org with this script (the block itself can be tangled to a bash script which uses nix)
     #+BEGIN_SRC elisp :tangle make.sh :shebang "#! /usr/bin/env nix-shell\n#! nix-shell -i \"emacs --script\"  -p \"pkgs.emacsWithPackages(epkgs: (with epkgs.melpaPackages; [ dash ]))\"\n#! nix-shell -I nixpkgs=channel:nixos-18.09"
    (package-initialize)
    (require 'dash)
    (require 'ob-tangle)
    (let ((orgfiles  (directory-files "." nil ".*org")))
      (-map (lambda (n) (org-babel-tangle-file n)) orgfiles)    
      )
  #+END_SRC


*** Then we can run the script
    #+BEGIN_SRC sh
    ./extest
    #+END_SRC

    #+RESULTS:
    | Hello world | John Smith | age = 26}) |


** Usage from stack projects

#+BEGIN_SRC sh
    $ stack test
#+END_SRC

#+BEGIN_SRC sh
    haskell-servant-cookbook-0.1.0.0: test (suite: test)

    Progress: 1/2
    GET /
      responds with 200
      responds with 'Simple'

    Finished in 0.0138 seconds
    2 examples, 0 failures

    Completed 2 action(s).
#+END_SRC

** Reference



https://github.com/commercialhaskell/stack-templates/blob/master/scotty-hspec-wai.hsfiles

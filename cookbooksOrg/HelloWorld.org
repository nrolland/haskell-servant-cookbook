* Hello world in Haskell with Servant

Repository http://github.com/algas/haskell-servant-cookbook

** API

"/" returns "Hello World" and "/users/(name)/(age)" returns User. User
type has properties =name= and =age=.

#+BEGIN_SRC haskell :tangle exhello.hs :shebang "#!/usr/bin/env stack\n-- stack --resolver lts-12.20 script" :noweb strip-export
  {-# LANGUAGE DataKinds         #-}
  {-# LANGUAGE DeriveGeneric     #-}
  {-# LANGUAGE OverloadedStrings #-}
  {-# LANGUAGE TypeOperators     #-}
  module HelloApi where

  import           Data.Aeson
  import           Data.Proxy
  import           Data.Text                  (Text)
  import qualified Data.Text                  as T
  import           GHC.Generics
  import           Servant.API
  <<imports>>

  data User = User
      { name :: Text
      , age  :: Int
      } deriving (Eq, Show, Read, Generic)
  instance FromJSON User
  instance ToJSON User

  type HelloAPI  = Get '[PlainText] Text
              :<|> "user" :> Capture "name" Text :> Capture "age" Int :> Get '[JSON] User

  helloApi :: Proxy HelloAPI
  helloApi = Proxy
#+END_SRC

** Server

#+NAME: imports
#+BEGIN_SRC haskell
    import           Network.Wai
    import           Network.Wai.Handler.Warp
    import           Servant
#+END_SRC
#+BEGIN_SRC haskell :tangle exhello.hs
    server :: Server HelloAPI
    server = hello :<|> user
        where
            hello = return "Hello world"
            user n a = return $ User n a

    app :: Application
    app = serve helloApi server

#+END_SRC

** Client

#+NAME: imports
#+BEGIN_SRC haskell
    import           Control.Monad.Trans.Except (ExceptT, runExceptT)
    import           Data.Text                  (Text)
    import qualified Data.Text                  as T
    import           Network.HTTP.Client        (Manager, defaultManagerSettings,
                                                 newManager)
    import           Servant.Client
#+END_SRC
#+BEGIN_SRC haskell :tangle exhello.hs
  hello :<|> user = client helloApi

  queries :: Manager -> BaseUrl -> IO (Either ServantError (Text, User))
  queries manager baseurl = do
      h <- runClientM hello $ mkClientEnv manager baseurl
      us <- runClientM (user "John Smith" 26) $ mkClientEnv manager baseurl
      return $ (,) <$> h <*> us

  test :: IO ()
  test = do
      manager <- newManager defaultManagerSettings
      let baseUrl = BaseUrl Http "localhost" 8080 ""
      res <- queries manager baseUrl
      case res of
          Left err -> putStrLn $ "Error: " ++ show err
          Right p -> print p
#+END_SRC

#+NAME: imports
#+BEGIN_SRC haskell
import Control.Concurrent
#+END_SRC
#+BEGIN_SRC haskell  :tangle exhello.hs
  main :: IO ()
  main = do 
      _ <- forkIO $ run 8080 app
      test
#+END_SRC




** Running this file

*** First we tangle the file, by running M-x org-babel-tangle
**** all options

  + directly in emacs with M-x org-babel-tangle
  + running the block with C-c C-c
     #+BEGIN_SRC elisp
  (org-babel-tangle)
  #+END_SRC
  + by running the script below (in command line or with C-c C-c)
      #+BEGIN_SRC sh
  emacs --batch -l org HelloWorld.org -f org-babel-tangle
  #+END_SRC
  + by tangling every file org with this script (the block itself can be tangled to a bash script which uses nix)
     #+BEGIN_SRC elisp :tangle make.sh :shebang "#! /usr/bin/env nix-shell\n#! nix-shell -i \"emacs --script\"  -p \"pkgs.emacsWithPackages(epkgs: (with epkgs.melpaPackages; [ dash ]))\"\n#! nix-shell -I nixpkgs=channel:nixos-18.09"
    (package-initialize)
    (require 'dash)
    (require 'ob-tangle)
    (let ((orgfiles  (directory-files "." nil ".*org")))
      (-map (lambda (n) (org-babel-tangle-file n)) orgfiles)    
      )
  #+END_SRC


*** Then we can run the script
    #+BEGIN_SRC sh
    ./exhello
    #+END_SRC

    #+RESULTS:
    | Hello world | John Smith | age = 26}) |

** Running the stack projects

0. Build\\
   =$ stack build=
1. Run Server\\
   =$ stack exec hello-server=
2. Test with curl\\
   =$ curl http://localhost:8080=\\
   =Hello world=\\
   =$ curl http://localhost:8080/user/hoge/3=\\
   ={"age":3,"name":"hoge"}=
3. Run client\\
   =$ stack exec hello-client=\\
   =("Hello world",User {name = "John Smith", age = 26})=

You can get values from the server with the client. A pros of Servant is
decreasing redundant description because a client and a server refer the
same api.

** Environment

- stack:lts-12.20
- servant-0.14.1

** Reference

http://haskell-servant.readthedocs.io/en/stable/index.html
